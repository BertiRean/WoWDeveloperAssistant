using System.Collections.Generic;
using WoWDeveloperAssistant.Misc;

namespace WoWDeveloperAssistant.Core_Script_Templates
{
    public static class Hooks
    {
        public static Dictionary<string, string> creatureHookDictionary = new Dictionary<string, string>
        {
            { "IsSummonedBy",      Utils.AddSpacesCount(12) + "void IsSummonedBy(Unit* p_Summoner) override" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "m_SummonerGuid = p_Summoner->GetObjectGuid();" + "\r\n" + Utils.AddSpacesCount(12) + "}" },
            { "QuestAccept",       Utils.AddSpacesCount(12) + "void sQuestAccept(Player* p_Player, Quest const* p_Quest) override" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "switch (p_Quest->GetQuestId())" + "\r\n" + Utils.AddSpacesCount(16) + "{" + "\r\n" + Utils.AddSpacesCount(20) + "case 0:" + "\r\n" + Utils.AddSpacesCount(20) + "{" + "\r\n" + Utils.AddSpacesCount(24) + "break;" + "\r\n" + Utils.AddSpacesCount(20) + "}" + "\r\n" + Utils.AddSpacesCount(20) + "default:" + "\r\n" + Utils.AddSpacesCount(24) + "break;" + "\r\n" + Utils.AddSpacesCount(16) + "}" + "\r\n" + Utils.AddSpacesCount(12) + "}" },
            { "QuestReward",       Utils.AddSpacesCount(12) + "void sQuestReward(Player* p_Player, Quest const* p_Quest, uint32 /*p_Option*/) override" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "switch (p_Quest->GetQuestId())" + "\r\n" + Utils.AddSpacesCount(16) + "{" + "\r\n" + Utils.AddSpacesCount(20) + "case 0:" + "\r\n" + Utils.AddSpacesCount(20) + "{" + "\r\n" + Utils.AddSpacesCount(24) + "break;" + "\r\n" + Utils.AddSpacesCount(20) + "}" + "\r\n" + Utils.AddSpacesCount(20) + "default:" + "\r\n" + Utils.AddSpacesCount(24) + "break;" + "\r\n" + Utils.AddSpacesCount(16) + "}" + "\r\n" + Utils.AddSpacesCount(12) + "}" },
            { "GossipSelect",      Utils.AddSpacesCount(12) + "void sGossipSelect(Player* p_Player, uint32 /*p_Sender*/, uint32 p_Action) override" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "p_Player->PlayerTalkClass->SendCloseGossip();" + "\r\n\r\n" + Utils.AddSpacesCount(16) + "switch (p_Action)" + "\r\n" + Utils.AddSpacesCount(16) + "{" + "\r\n" + Utils.AddSpacesCount(20) + "case 0:" + "\r\n" + Utils.AddSpacesCount(20) + "{" + "\r\n" + Utils.AddSpacesCount(24) + "break;" + "\r\n" + Utils.AddSpacesCount(20) + "}" + "\r\n" + Utils.AddSpacesCount(20) + "default:" + "\r\n" + Utils.AddSpacesCount(24) + "break;" + "\r\n" + Utils.AddSpacesCount(16) + "}" + "\r\n" + Utils.AddSpacesCount(12) + "}" },
            { "GossipHello",       Utils.AddSpacesCount(12) + "void sGossipHello(Player* p_Player) override" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "\r\n" + Utils.AddSpacesCount(12) + "}" },
            { "MoveInLineOfSight", Utils.AddSpacesCount(12) + "void MoveInLineOfSight(Unit* p_Who) override" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "\r\n" + Utils.AddSpacesCount(12) + "}" },
            { "DoAction",          Utils.AddSpacesCount(12) + "void DoAction(int32 const p_Action) override" + "\r\n" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "switch (p_Action)" + "\r\n" + Utils.AddSpacesCount(16) + "{" + "\r\n" + Utils.AddSpacesCount(20) + "case 0:" + "\r\n" + Utils.AddSpacesCount(20) + "{" + "\r\n" + Utils.AddSpacesCount(24) + "break;" + "\r\n" + Utils.AddSpacesCount(20) + "}" + "\r\n" + Utils.AddSpacesCount(20) + "default:" + "\r\n" + Utils.AddSpacesCount(24) + "break;" + "\r\n" + Utils.AddSpacesCount(16) + "}" + "\r\n" + Utils.AddSpacesCount(12) + "}" },
            { "SetData",           Utils.AddSpacesCount(12) + "void SetData(uint64 /*p_Type*/, uint32 p_Value) override" + "\r\n" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "switch (p_Value)" + "\r\n" + Utils.AddSpacesCount(16) + "{" + "\r\n" + Utils.AddSpacesCount(20) + "case 0:" + "\r\n" + Utils.AddSpacesCount(20) + "{" + "\r\n" + Utils.AddSpacesCount(24) + "break;" + "\r\n" + Utils.AddSpacesCount(20) + "}" + "\r\n" + Utils.AddSpacesCount(20) + "default:" + "\r\n" + Utils.AddSpacesCount(24) + "break;" + "\r\n" + Utils.AddSpacesCount(16) + "}" + "\r\n" + Utils.AddSpacesCount(12) + "}" },
            { "SpellHit",          Utils.AddSpacesCount(12) + "void SpellHit(Unit* p_Caster, SpellInfo const* p_Spell) override" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "switch (p_Spell->Id)" + "\r\n" + Utils.AddSpacesCount(16) + "{" + "\r\n" + Utils.AddSpacesCount(20) + "case 0:" + "\r\n" + Utils.AddSpacesCount(20) + "{" + "\r\n" + Utils.AddSpacesCount(24) + "break;" + "\r\n" + Utils.AddSpacesCount(20) + "}" + "\r\n" + Utils.AddSpacesCount(20) + "default:" + "\r\n" + Utils.AddSpacesCount(24) + "break;" + "\r\n" + Utils.AddSpacesCount(16) + "}" + "\r\n" + Utils.AddSpacesCount(12) + "}" },
            { "OnSpellCasted",     Utils.AddSpacesCount(12) + "void OnSpellCasted(SpellInfo const* p_SpellInfo) override" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "switch (p_SpellInfo->Id)" + "\r\n" + Utils.AddSpacesCount(16) + "{" + "\r\n" + Utils.AddSpacesCount(20) + "case 0:" + "\r\n" + Utils.AddSpacesCount(20) + "{" + "\r\n" + Utils.AddSpacesCount(24) + "break;" + "\r\n" + Utils.AddSpacesCount(20) + "}" + "\r\n" + Utils.AddSpacesCount(20) + "default:" + "\r\n" + Utils.AddSpacesCount(24) + "break;" + "\r\n" + Utils.AddSpacesCount(16) + "}" + "\r\n" + Utils.AddSpacesCount(12) + "}" },
            { "PassengerBoarded",  Utils.AddSpacesCount(12) + "void PassengerBoarded(Unit* p_Passenger, int8 /*p_SeatID*/, bool p_Apply) override" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "\r\n" + Utils.AddSpacesCount(12) + "}" },
            { "MovementInform",    Utils.AddSpacesCount(12) + "void MovementInform(uint32 /*p_Type*/, uint64 p_PointId) override" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "switch (p_PointId)" + "\r\n" + Utils.AddSpacesCount(16) + "{" + "\r\n" + Utils.AddSpacesCount(20) + "case 0:" + "\r\n" + Utils.AddSpacesCount(20) + "{" + "\r\n" + Utils.AddSpacesCount(24) + "break;" + "\r\n" + Utils.AddSpacesCount(20) + "}" + "\r\n" + Utils.AddSpacesCount(20) + "default:" + "\r\n" + Utils.AddSpacesCount(24) + "break;" + "\r\n" + Utils.AddSpacesCount(16) + "}" + "\r\n" + Utils.AddSpacesCount(12) + "}" },
            { "Reset",             Utils.AddSpacesCount(12) + "void Reset() override" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "\r\n" + Utils.AddSpacesCount(12) + "}" },
            { "EnterCombat",       Utils.AddSpacesCount(12) + "void EnterCombat(Unit* /*p_Victim*/) override" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "\r\n" + Utils.AddSpacesCount(12) + "}" },
            { "DamageTaken",       Utils.AddSpacesCount(12) + "void DamageTaken(Unit* /*p_Attacker*/, uint32& /*p_Damage*/, SpellInfo const* /*p_SpellInfo*/) override" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "\r\n" + Utils.AddSpacesCount(12) + "}" },
            { "JustDied",          Utils.AddSpacesCount(12) + "void JustDied(Unit* /*p_Killer*/) override" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "\r\n" + Utils.AddSpacesCount(12) + "}" },
            { "UpdateAI",          Utils.AddSpacesCount(12) + "void UpdateAI(uint32 const /*p_Diff*/) override" + "\r\n" + Utils.AddSpacesCount(12) + "{" + "\r\n" +  Utils.AddSpacesCount(16) + "\r\n" + Utils.AddSpacesCount(12) + "}" }
        };
    }
}
